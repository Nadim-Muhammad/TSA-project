plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
#ARIMA(3,1,3) without ma3 = ARIMA(3,1,2)
arima312_second <- Arima(chosen_ones$second, order = c(3, 1, 2))
coeftest(arima312_second)
plot_ACF_PACF_resids(arima312_second)
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima312_second), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
#ARIMA(15,1,3), but without insignificant variables
arima1513_fixed_second <- Arima(chosen_ones$second,
order = c(15, 1, 3),
fixed = c(NA, NA, NA, NA, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, NA,
NA, 0, NA))
coeftest(arima1513_fixed_second)
plot_ACF_PACF_resids(arima1513_fixed_second)
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima1513_fixed_second), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
abline(h=0.05, col='red', type='l')
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
arima1513_fixed2_second <- Arima(chosen_ones$second,
order = c(15, 1, 3),
fixed = c(0, NA, NA, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, 0, NA,
0, 0, NA))
coeftest(arima1513_fixed2_second)
plot_ACF_PACF_resids(arima1513_fixed2_second)
bj_pvalues = c()
for(i in c(1:100)){
bj = Box.test(resid(arima1513_fixed2_second), type = "Ljung-Box", lag = i)
bj_pvalues = append(bj_pvalues,bj$p.value)
}
plot(bj_pvalues, type='l')
abline(h=0.05, col='red', type='l')
################################################
#4 INFORMATION CRITERIAS
AIC(arima111_second, arima313_second, arima1513_second, arima1513_fixed_second, arima1513_fixed2_second)
BIC(arima111_second, arima313_second, arima1513_second, arima1513_fixed_second, arima1513_fixed2_second)
arima1513_fixed_second_forecast <- forecast(arima1513_fixed_second, h=30)
arima1513_fixed_second_forecast
arima1513_fixed_second_forecast_data <- data.frame(f_mean  = as.numeric(arima1513_fixed_second_forecast$mean),
f_lower = as.numeric(arima1513_fixed_second_forecast$lower[, 2]),
f_upper = as.numeric(arima1513_fixed_second_forecast$upper[, 2]))
arima1513_fixed_second_forecast_data_xts <- xts(arima1513_fixed_second_forecast_data, order.by = data_test$X)
arima1513_fixed2_second_forecast <- forecast(arima1513_fixed2_second, h=30)
arima1513_fixed2_second_forecast
arima1513_fixed2_second_forecast_data <- data.frame(f_mean  = as.numeric(arima1513_fixed2_second_forecast$mean),
f_lower = as.numeric(arima1513_fixed2_second_forecast$lower[, 2]),
f_upper = as.numeric(arima1513_fixed2_second_forecast$upper[, 2]))
arima1513_fixed2_second_forecast_data_xts <- xts(arima1513_fixed2_second_forecast_data, order.by = data_test$X)
arima313_second_forecast <- forecast(arima313_second, h=30)
arima313_second_forecast
arima313_second_forecast_data <- data.frame(f_mean  = as.numeric(arima313_second_forecast$mean),
f_lower = as.numeric(arima313_second_forecast$lower[, 2]),
f_upper = as.numeric(arima313_second_forecast$upper[, 2]))
arima313_second_forecast_data_xts <- xts(arima313_second_forecast_data, order.by = data_test$X)
########################################################
#VISUALIZATION OF THE SECOND TIME SERIES
data_all_second_xts <- rbind(data_train_xts[,9], data_test_xts[,9])
names(data_all_second_xts) <- "second"
ARIMA_forecasts_second <- merge(data_all_second_xts,
arima1513_fixed_second_forecast_data_xts,
arima1513_fixed2_second_forecast_data_xts,
arima313_second_forecast_data_xts)
names(ARIMA_forecasts_second) <- c("Second Time Series", "arima1513_fixed mean", "arima1513_fixed 95% lower", "arima1513_fixed 95% upper", "arima1513_fixed2 mean", "arima1513_fixed2 95% lower", "arima1513_fixed2 95% upper", "arima313 mean", "arima313 95% lower", "arima313 95% upper")
plot(ARIMA_forecasts_second["2020-11/",],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of chosen time series",
col = c("black", "blue", "red", "red", "green", "pink", "pink", "cyan", "magenta", "magenta"),
legend.loc = "bottomleft")
ecm_model <- lm(diff_first ~ diff_second + lag_resid_coint, data = chosen_ones)
ecm_model <- lm(diff_first ~ diff_second + lag_resid_coint -1, data = chosen_ones)
summary(ecm_model)
grangertest(first ~ second,
data = chosen_ones,
order = 3)
grangertest(second ~ first,
data = chosen_ones,
order = 3)
for(i in 1:5){
print(i)
print("first ~ second")
print(grangertest(first ~ second,
data = chosen_ones,
order = i))
print(i)
print("second ~ first")
print(grangertest(second ~ first,
data = chosen_ones,
order = i))
}
#Lets select VAR model with proper lag legnht
VARselect(chosen_ones[,1:2], lag.max = 10) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
VARselect(chosen_ones[,1:2], lag.max = 10, season = 31) %>%
.$criteria %>%
t() %>%
as_tibble() %>%
mutate(nLags = 1:nrow(.)) %>%
kbl(digits = 3) %>%
kable_classic("striped", full_width = F)
#But still let's check it:
VAR_model_6_lags <- VAR(chosen_ones[,1:2],
p = 6,
season = 31)
summary(VAR_model_6_lags)
VAR_model_6_lags <- VAR(chosen_ones[,1:2],
p = 6)
summary(VAR_model_6_lags)
plot(VAR_model_6_lags)
VAR_model_8_lags <- VAR(chosen_ones[,1:2],
p = 8)
summary(VAR_model_8_lags)
plot(VAR_model_8_lags)
serial.test(VAR_model_6_lags)
serial.test(VAR_model_8_lags)
#AIC/BIC
AIC(VAR_model_6_lags, VAR_model_8_lags)
BIC(VAR_model_6_lags, VAR_model_8_lags)
#IRF
plot(irf(VAR_model_6_lags, n.ahead = 36))
plot(fevd(VAR_model_6_lags, n.ahead = 36))
johan.test.trace <-
ca.jo(chosen_ones[,1:2],
ecdet = "trend",
type = "trace",  # type of the test: trace or eigen
K = 6) # lags in VAR model
summary(johan.test.trace)
cbind(summary(johan.test.trace)@teststat, summary(johan.test.trace)@cval)
#lets change type to eigen
johan.test.eigen <-
ca.jo(chosen_ones[,1:2],
ecdet = "trend",
type = "eigen",  # type of the test: trace or eigen
K = 6) # lags in VAR model
summary(johan.test.eigen)
cbind(summary(johan.test.eigen)@teststat, summary(johan.test.eigen)@cval)
VECM_model <- cajorls(johan.test.trace, # defined specification
r = 1) # number of cointegrating vectors
summary(VECM_model$rlm)
VECM_model$beta
VECM_model.asVAR <- vec2var(johan.test.trace, r = 1)
VECM_model.asVAR
plot(irf(VECM_model.asVAR, n.ahead = 36))
head(residuals(VECM_model.asVAR))
serial.test(VECM_model.asVAR)
plot(serial.test(VECM_model.asVAR))
as_tibble() %>%
ggplot(aes(`resids of first`)) +
geom_histogram(aes(y =..density..),
colour = "black",
fill = "pink") +
stat_function(fun = dnorm,
args = list(mean = mean(residuals(VECM_model.asVAR)[, 1]),
sd = sd(residuals(VECM_model.asVAR)[, 1]))) +
theme_bw() +
labs(
title = "Density of PPI residuals",
y = "", x = "",
caption = "source: own calculations"
)
#lets use Jarque-Bera multivariate test to check for normality in residuals
normality.test(VECM_model.asVAR)
VECM_model.asVAR.fore <-
predict(
VECM_model.asVAR,     # no of cointegrating vectors
n.ahead = 30, # forecast horizon
ci = 0.95)
VECM_model.asVAR.fore$fcst$first
VECM_model.asVAR.fore$fcst$second
VECM_first_forecast <- xts(VECM_model.asVAR.fore$fcst$first[,-4], order.by = data_test$X)
VECM_second_forecast <- xts(VECM_model.asVAR.fore$fcst$second[,-4], order.by = data_test$X)
names(VECM_first_forecast) <- c("first_fore", "first_lower", "first_upper")
names(VECM_second_forecast) <- c("second_fore", "second_lower", "second_upper")
VECM_first_all_data <- merge(data_all_xts,
data_all_second_xts,
VECM_first_forecast,
VECM_second_forecast)
plot(VECM_first_all_data["2020-11/", c("first", "first_fore",
"first_lower", "first_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 days forecast of first",
col = c("black", "blue", "red", "red"))
plot(VECM_first_all_data["2020-11/", c("second", "second_fore",
"second_lower", "second_upper")],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 days forecast of second",
col = c("black", "blue", "red", "red"))
forecasts_first_all <- merge(ARIMA_forecasts_first,
VECM_first_forecast)
forecasts_second_all <- merge(ARIMA_forecasts_second,
VECM_second_forecast)
#first
plot(forecasts_first_all["2020-11/",],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of chosen time series",
col = c("black", "blue", "red", "red", "green", "pink", "pink", "cyan", "magenta", "magenta", "orange", "yellow", "yellow"),
legend.loc = "bottomleft")
#second
plot(forecasts_second_all["2020-11/",],
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
main = "30 day forecast of chosen time series",
col = c("black", "blue", "red", "red", "green", "pink", "pink", "cyan", "magenta", "magenta", "orange", "yellow", "yellow"),
legend.loc = "bottomleft")
names(forecasts_first_all)
names(forecasts_second_all)
################# FIRST
errors_first_ts <- {}
#ARIMA(6,1,3)
errors_first_ts$arima613mae   <-  mae(forecasts_first_all[971:1000,1],forecasts_first_all$arima613.mean)
errors_first_ts$arima613mse   <-  mse(forecasts_first_all[971:1000,1],forecasts_first_all$arima613.mean)
errors_first_ts$arima613mape  <-  mape(forecasts_first_all[971:1000,1],forecasts_first_all$arima613.mean)
errors_first_ts$arima613amape <-  mean(abs((forecasts_first_all[971:1000,1] - forecasts_first_all$arima613.mean) /
(forecasts_first_all[971:1000,1] + forecasts_first_all$arima613.mean)))
#ARIMA(7,1,3)
errors_first_ts$arima713mae   <-  mae(forecasts_first_all[971:1000,1],forecasts_first_all$arima713.mean)
errors_first_ts$arima713mse   <-  mse(forecasts_first_all[971:1000,1],forecasts_first_all$arima713.mean)
errors_first_ts$arima713mape  <-  mape(forecasts_first_all[971:1000,1],forecasts_first_all$arima713.mean)
errors_first_ts$arima713amape <-  mean(abs((forecasts_first_all[971:1000,1] - forecasts_first_all$arima713.mean) /
(forecasts_first_all[971:1000,1] + forecasts_first_all$arima713.mean)))
#ARIMA(6,1,4)
errors_first_ts$arima614mae   <-  mae(forecasts_first_all[971:1000,1],forecasts_first_all$arima614.mean)
errors_first_ts$arima614mse   <-  mse(forecasts_first_all[971:1000,1],forecasts_first_all$arima614.mean)
errors_first_ts$arima614mape  <-  mape(forecasts_first_all[971:1000,1],forecasts_first_all$arima614.mean)
errors_first_ts$arima614amape <-  mean(abs((forecasts_first_all[971:1000,1] - forecasts_first_all$arima614.mean) /
(forecasts_first_all[971:1000,1] + forecasts_first_all$arima614.mean)))
#VECM
errors_first_ts$VECM_mae   <-  mae(forecasts_first_all[971:1000,1],forecasts_first_all$first_fore)
errors_first_ts$VECM_mse   <-  mse(forecasts_first_all[971:1000,1],forecasts_first_all$first_fore)
errors_first_ts$VECM_mape  <-  mape(forecasts_first_all[971:1000,1],forecasts_first_all$first_fore)
errors_first_ts$VECM_amape <-  mean(abs((forecasts_first_all[971:1000,1] - forecasts_first_all$first_fore) /
(forecasts_first_all[971:1000,1] + forecasts_first_all$first_fore)))
errors_first_ts
#MAE
errors_first_ts$arima613mae
errors_first_ts$arima713mae
errors_first_ts$arima614mae
errors_first_ts$VECM_mae
#arima(6,1,4) the best in terms of MAE
?cbind
#MSE
errors_first_ts$arima613mse
errors_first_ts$arima713mse
errors_first_ts$arima614mse
errors_first_ts$VECM_mse
#MAPE
errors_first_ts$arima613mape
errors_first_ts$arima713mape
errors_first_ts$arima614mape
errors_first_ts$VECM_mape
#AMAPE
errors_first_ts$arima613amape
errors_first_ts$arima713amape
errors_first_ts$arima614amape
errors_first_ts$VECM_amape
################# SECOND
errors_second_ts <- {}
#ARIMA(15,1,3) fixed
errors_second_ts$arima1513_fixed_mae   <-  mae(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed.mean)
errors_second_ts$arima1513_fixed_mse   <-  mse(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed.mean)
errors_second_ts$arima1513_fixed_mape  <-  mape(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed.mean)
errors_second_ts$arima1513_fixed_amape <-  mean(abs((forecasts_second_all[971:1000,1] - forecasts_second_all$arima1513_fixed.mean) /
(forecasts_second_all[971:1000,1] + forecasts_second_all$arima1513_fixed.mean)))
#ARIMA(15,1,3) fixed2
errors_second_ts$arima1513_fixed2_mae   <-  mae(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed2.mean)
errors_second_ts$arima1513_fixed2_mse   <-  mse(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed2.mean)
errors_second_ts$arima1513_fixed2_mape  <-  mape(forecasts_second_all[971:1000,1],forecasts_second_all$arima1513_fixed2.mean)
errors_second_ts$arima1513_fixed2_amape <-  mean(abs((forecasts_second_all[971:1000,1] - forecasts_second_all$arima1513_fixed2.mean) /
(forecasts_second_all[971:1000,1] + forecasts_second_all$arima1513_fixed2.mean)))
#ARIMA(3,1,3)
errors_second_ts$arima313_mae   <-  mae(forecasts_second_all[971:1000,1],forecasts_second_all$arima313.mean)
errors_second_ts$arima313_mse   <-  mse(forecasts_second_all[971:1000,1],forecasts_second_all$arima313.mean)
errors_second_ts$arima313_mape  <-  mape(forecasts_second_all[971:1000,1],forecasts_second_all$arima313.mean)
errors_second_ts$arima313_amape <-  mean(abs((forecasts_second_all[971:1000,1] - forecasts_second_all$arima313.mean) /
(forecasts_second_all[971:1000,1] + forecasts_second_all$arima313.mean)))
#VECM
errors_second_ts$VECM_mae   <-  mae(forecasts_second_all[971:1000,1],forecasts_second_all$second_fore)
errors_second_ts$VECM_mse   <-  mse(forecasts_second_all[971:1000,1],forecasts_second_all$second_fore)
errors_second_ts$VECM_mape  <-  mape(forecasts_second_all[971:1000,1],forecasts_second_all$second_fore)
errors_second_ts$VECM_amape <-  mean(abs((forecasts_second_all[971:1000,1] - forecasts_second_all$second_fore) /
(forecasts_second_all[971:1000,1] + forecasts_second_all$second_fore)))
#MAE
errors_second_ts$arima1513_fixed_mae
errors_second_ts$arima1513_fixed2_mae
errors_second_ts$arima313_mae
errors_second_ts$VECM_mae
#MSE
errors_second_ts$arima1513_fixed_mse
errors_second_ts$arima1513_fixed2_mse
errors_second_ts$arima313_mse
errors_second_ts$VECM_mse
#MAPE
errors_second_ts$arima1513_fixed_mape
errors_second_ts$arima1513_fixed2_mape
errors_second_ts$arima313_mape
errors_second_ts$VECM_mape
#AMAPE
errors_second_ts$arima1513_fixed_amape
errors_second_ts$arima1513_fixed2_amape
errors_second_ts$arima313_amape
errors_second_ts$VECM_amape
#ARIMA(15,1,3) fixed best in terms of AMAPE
setwd("C:/Users/micha/OneDrive/Dokumenty/GitHub/TSA-project/")
options(scipen = 10)
source("functions/function_plot_ACF_PACF_resids.R") source("functions/testdf.R")
data \<- read.csv("data/TSA_2023_project_data_1.csv")
data_train \<- data[1:970,]
data_test \<- data[971:1000,]
data_train$X <- as.Date(data_train$X, format = "%Y-%m-%d")
data_test$X <- as.Date(data_test$X, format = "%Y-%m-%d")
data <- read.csv("data/TSA_2023_project_data_1.csv")
data_train <- data[1:970,]
data_test <- data[971:1000,]
data_train$X <- as.Date(data_train$X, format = "%Y-%m-%d")
data_test$X <- as.Date(data_test$X, format = "%Y-%m-%d")
data_train_xts \<- xts(data_train[, -1], order.by = data_train\$X)
data_train_xts \<- xts(data_train[, -1], order.by = data_train\$X)
data_train_xts <- xts(data_train[, -1], order.by = data_train\$X)
data_test_xts <- xts(data_test[, -1], order.by = data_test\$X)
data_train_xts <- xts(data_train[, -1], order.by = data_train$X)
data_test_xts <- xts(data_test[, -1], order.by = data_test$X)
plot(data_train_xts, col = c("black", "blue", "red", "purple", "green", "pink", "brown", "cyan", "magenta", "coral"), major.ticks = "years", grid.ticks.on = "years", grid.ticks.lty = 3, main = "Plotted time series", legend.loc = "bottomleft")
*BG test - null hypothesis: no serial correlation of any order (up to max.augmentations)* *ADF test - null hypothesis: unit root in the time series*
for (i in 1:10) { print(i) print(testdf(variable = data_train_xts[,i], max.augmentations = 3)) } #-4
for (i in 1:10) { print(i) print(testdf(variable = data_train_xts[,i], max.augmentations = 3)) } #-4
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3)) }
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
}
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3)) }
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
data_train_xts_diff <- diff.xts(data_train_xts)
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3)) }
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
print(i)
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3)) }
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3))
data_train_xts_diff <- diff.xts(data_train_xts)
chosen_ones <- xts(order.by = data_train\$X)
chosen_ones <- xts(order.by = data_train$X)
chosen_ones$first<- data_train_xts[,3] chosen_ones$second<- data_train_xts[,9]
chosen_ones <- xts(order.by = data_train$X)
chosen_ones$first<- data_train_xts[,3]
chosen_ones$second<- data_train_xts[,9]
plot(chosen_ones)
chosen_ones$diff_first <- diff.xts(chosen_ones$first) chosen_ones$diff_second <- diff.xts(chosen_ones$second)
chosen_ones$diff_first <- diff.xts(chosen_ones$first)
chosen_ones$diff_second <- diff.xts(chosen_ones$second)
plot(chosen_ones)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
}
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
}
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
}
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
```{r}
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts[,i],
max.augmentations = 3))
}
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3))
}
print(i)
print(i)
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3))
testdf(variable = chosen_ones\$first, max.augmentations = 3)
testdf(variable = chosen_ones$first, max.augmentations = 3)
testdf(variable = chosen_ones\$diff_second, max.augmentations = 3)
testdf(variable = chosen_ones$diff_second, max.augmentations = 3)
testdf(variable = chosen_ones$diff_second, max.augmentations = 3)
cointegration <- lm(first ~ second, data = chosen_ones)
summary(cointegration)
testdf(variable = residuals(cointegration), max.augmentations = 3)
testdf(variable = residuals(cointegration), max.augmentations = 3)
summary(cointegration)
cointegrated_series <- lag.xts(residuals(cointegration))
testdf(variable = residuals(cointegration), max.augmentations = 3)
cointegrated_series <- lag.xts(residuals(cointegration))
chosen_ones$lag_resid_coint <- cointegrated_series
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
cointegration <- lm(first ~ second, data = chosen_ones)
summary(cointegration)
plot(cointegrated_series)
testdf(variable = residuals(cointegration), max.augmentations = 3)
chosen_ones$lag_resid_coint <- cointegrated_series
summary(cointegration)
summary(cointegration)
cointegration <- lm(first ~ second, data = chosen_ones)
testdf(variable = residuals(cointegration), max.augmentations = 3)
summary(cointegration)
cointegration <- lm(first ~ second, data = chosen_ones)
summary(cointegration)
testdf(variable = residuals(cointegration), max.augmentations = 3)
cointegrated_series <- lag.xts(residuals(cointegration))
chosen_ones$lag_resid_coint <- cointegrated_series
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
cointegrated_series <- lag.xts(residuals(cointegration))
chosen_ones$lag_resid_coint <- cointegrated_series
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
cointegrated_series <- lag.xts(residuals(cointegration))
chosen_ones$lag_resid_coint <- cointegrated_series
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
cointegrated_series <- lag.xts(residuals(cointegration))
chosen_ones$lag_resid_coint <- cointegrated_series
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
plot(cointegrated_series)
testdf(variable = cointegrated_series, max.augmentations = 3)
###############################################################
#3.1 ARIMA for first time series (from before we know that this series is I(1))
par(mfrow = c(2, 1))
acf(chosen_ones$diff_first,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(chosen_ones$diff_first,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
par(mfrow = c(2, 1))
pacf(chosen_ones$diff_first,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
setwd("C:/Users/micha/OneDrive/Dokumenty/GitHub/TSA-project")
options(scipen = 10)
source("functions/function_plot_ACF_PACF_resids.R") source("functions/testdf.R")
data <- read.csv("data/TSA_2023_project_data_1.csv")
data_train <- data[1:970,]
data_test <- data[971:1000,]
data_train$X <- as.Date(data_train$X, format = "%Y-%m-%d")
data_test$X <- as.Date(data_test$X, format = "%Y-%m-%d")
source("functions/function_plot_ACF_PACF_resids.R") source("functions/testdf.R")
source("functions/function_plot_ACF_PACF_resids.R")
source("functions/testdf.R")
for (i in 1:10) {
print(i)
print(testdf(variable = data_train_xts_diff[,i],
max.augmentations = 3))
}
